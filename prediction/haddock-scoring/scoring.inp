! scoring.inp
!     Generates missing coordinates and topology, minimize comples and score
!
! ***********************************************************************
! * Copyright 2003-2020 Alexandre Bonvin, Utrecht University.           *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!
{+ file: scoring.inp +}

{- begin block parameter definition -} define(

{============================== important =================================}

{* Different chains in the structure must have either unique segid or
   chainid records. If this is no the case, the end of a chain must
   be delimited by a TER card. *}

{* A break in a chain can be detected automatically or should be delimited
   by a BREAK card. In this case no patch (head, tail or link) will be 
   applied between the residues that bound the chain break. *}

{* NB. The input PDB file must finish with an END statement *}

{=========================== coordinate files =============================}

{* coordinate file *}
{===>} coordinate_infile="/home/abonvin/software/haddock/examples/e2a.pdb";

{* convert chainid to segid if chainid is non-blank *}
{+ choice: true false +}
{===>} convert=false;

{* separate chains by segid - a new segid starts a new chain *}
{+ choice: true false +}
{===>} separate=true;
{============================ renaming atoms ===============================}

{* some atoms may need to be renamed in the topology database to conform to what is present in the coordinate file *}

{* delta carbon in isoleucine is named CD in CNS
   what is it currently called in the coordinate file? *}
{* this will not be changed if left blank *}
{===>} ile_CD_becomes="CD1";

{* terminal oxygens are named OT1 and OT2 in CNS
   what are they currently called in the coordinate file? *}
{* these will not be changed if left blank *}
{===>} OT1_becomes="O";
{===>} OT2_becomes="OXT";

{======================= automatic mainchain breaks ========================}

{* automatically detect mainchain breaks in proteins based on distance *}
{* the peptide link at break points will be removed *}
{+ choice: true false +}
{===>} auto_break=true;

{* cutoff distance in Angstroms for identification of breaks *}
{* the default of 2.5A for peptide bonds should be reasonable for most cases. If the input
   structure has bad geometry it may be necessary to increase this distance *}
{===>} pbreak_cutoff=3.5;
{* the default of 4.5A for nucleic acid linkages should be reasonable for most cases. If the input
   structure has bad geometry it may be necessary to increase this distance *}
{===>} dbreak_cutoff=4.5;

{* file containing patches to delete peptide links *}
{===>} prot_break_infile="HADDOCK:toppar/protein_break.top";

{* file containing patches to delete nucleic acid links *}
{===>} dna_break_infile="HADDOCK:toppar/dna_break.top";

{======================= automatic disulphide bonds ========================}

{* cutoff distance in Angstroms for identification of disulphides *}
{* the default of 3.0A should be reasonable for most cases. If the input
   structure has bad geometry it may be necessary to increase this distance *}
{===>} disulphide_dist=3.0;

{======================= automatic cyclic peptidic bond ====================}

{* cutoff distance in Angstroms for identification of disulphides *}
{* the default of 3.0A should be reasonable for most cases. If the input
   structure has bad geometry it may be necessary to increase this distance *}
{===>} cyclicpept_dist=1.5;

{======================= automatic iron cluster bonds ======================}

{* cutoff distance in Angstroms for identification of iron cluster bonds *}
{* the default of 8.0A should be reasonable for most cases. If the input
   structure has bad geometry it may be necessary to increase this distance *}
{===>} iron1cluster_dist=5.0;
{===>} iron2cluster_dist=8.0;

{======================= automatic cis peptide bonds =======================}

{* select atoms to be included in calculation of omega angles *}
{* to define cis peptides*}
{===>} atom_select=(known and not hydrogen);

{========================= RNA to DNA conversion  ==========================}

{* All nucleic acid residues initially have ribose sugars (rather than
   deoxyribose). A patch must be applied to convert the ribose to deoxyribose
   for DNA residues. Select those residues which need to have the patch
   applied to make them DNA. *}
{* Make sure that the atom selection is specific for the nucleic acid
   residues *}
{===>} dna_sele=(none);
            
{========================= generate parameters =============================}

{* hydrogen flag - determines whether hydrogens will be output *}
{* must be true for NMR, atomic resolution X-ray crystallography 
   or modelling.  Set to false for most X-ray crystallographic 
   applications at resolution > 1A *}
{+ choice: true false +}
{===>} hydrogen_flag=true;

{* which hydrogens to build *}
{+ choice: "all" "unknown" +}
{===>} hydrogen_build="all";

{* selection of atoms other than hydrogens for which coordinates
   will be generated *}
{* to generate coordinates for all unknown atoms use: (not(known)) *}
{===>} atom_build=(not(known));

{* selection of atoms to be deleted *}
{* to delete no atoms use: (none) *}
{===>} atom_delete=(none);

{* set bfactor flag *}
{+ choice: true false +}
{===>} set_bfactor=true;

{* set bfactor value *}
{===>} bfactor=15.0;

{* set occupancy flag *}
{+ choice: true false +}
{===>} set_occupancy=true;

{* set occupancy value *}
{===>} occupancy=1.0;

{============================= output files ================================}

{* output structure file *}
{===>} structure_outfile="haddock.psf";

{* output coordinate file *}
{===>} coordinate_outfile="haddock.pdb";

{================== protein topology and parameter files ===================}

{* protein topology file *}
{===>} prot_topology_infile="HADDOCK:toppar/protein-allhdg5-4.top";

{* protein linkage file *}
{===>} prot_link_infile="HADDOCK:toppar/protein-allhdg5-4-noter.link";

{* protein parameter file *}
{===>} prot_parameter_infile="HADDOCK:toppar/protein-allhdg5-4.param";

{================ nucleic acid topology and parameter files =================}

{* nucleic acid topology file *}
{===>} nucl_topology_infile="HADDOCK:toppar/dna-rna-allatom-hj-opls-1.3.top";

{* nucleic acid linkage file *}
{* use HADDOCK:/toppar/dna-rna-pho.link for 5'-phosphate *}
{===>} nucl_link_infile="HADDOCK:/toppar/dna-rna-1.3.link";

{* nucleic acid parameter file *}
{===>} nucl_parameter_infile="HADDOCK:/toppar/dna-rna-allatom-hj-opls-1.3.param";

{================= carbohydrate topology and parameter files ===============}

{* carbohydrate topology file *}
{===>} carbo_topology_infile="HADDOCK:/toppar/carbohydrate.top";

{* carbohydrate parameter file *}
{===>} carbo_parameter_infile="HADDOCK:/toppar/carbohydrate.param";

{================= solvent topology and parameter files ====================}

{* solvent topology file *}
{===>} solv_topology_infile="HADDOCK:/toppar/water-allhdg5-4.top";

{* solvent parameter file *}
{===>} solv_parameter_infile="HADDOCK:/toppar/water-allhdg5-4.param";

{================= cofactor topology and parameter files ===================}

{* co-factor topology file *}
{===>} cofac_topology_infile="HADDOCK:/toppar/ligand.top";

{* co-factor linkage file *}
{===>} cofac_link_infile="HADDOCK:toppar/ligand.pep";

{* co-factor parameter file *}
{===>} cofac_parameter_infile="HADDOCK:/toppar/ligand.param";

{================= known ligands topology and parameter files ==============}

{* ligands topology file *}
{===>} ligands_topology_infile="HADDOCK:/toppar/fragment_probes.top";

{* ligands parameter file *}
{===>} ligands_parameter_infile="HADDOCK:/toppar/fragment_probes.param";

{===================== ion topology and parameter files ====================}

{* ion topology file *}
{===>} ion_topology_infile="HADDOCK:/toppar/ion.top";

{* ion parameter file *}
{===>} ion_parameter_infile="HADDOCK:/toppar/ion.param";

{===================== heme topology and parameter files ====================}

{* heme topology file *}
{===>} heme_topology_infile="HADDOCK:/toppar/hemes-allhdg.top";

{* heme parameter file *}
{===>} heme_parameter_infile="HADDOCK:/toppar/hemes-allhdg.param";

 ) {- end block parameter definition -}


eval($filelist="filelist.list")

evaluate ($iteration=1)
evaluate ($data.ncomponents=20)
evaluate ($Toppar.prot_segid_1="A")
evaluate ($Toppar.prot_segid_2="B")
evaluate ($Toppar.prot_segid_3="C")
evaluate ($Toppar.prot_segid_4="D")
evaluate ($Toppar.prot_segid_5="E")
evaluate ($Toppar.prot_segid_6="F")
evaluate ($Toppar.prot_segid_7="G")
evaluate ($Toppar.prot_segid_8="H")
evaluate ($Toppar.prot_segid_9="I")
evaluate ($Toppar.prot_segid_10="J")
evaluate ($Toppar.prot_segid_11="K")
evaluate ($Toppar.prot_segid_12="L")
evaluate ($Toppar.prot_segid_13="M")
evaluate ($Toppar.prot_segid_14="N")
evaluate ($Toppar.prot_segid_15="O")
evaluate ($Toppar.prot_segid_16="P")
evaluate ($Toppar.prot_segid_17="Q")
evaluate ($Toppar.prot_segid_18="R")
evaluate ($Toppar.prot_segid_19="S")
evaluate ($Toppar.prot_segid_20="T")

!evaluate ($Toppar.nseg_1 = -1)
!evaluate ($Toppar.nseg_2 = -1)
!evaluate ($Toppar.nfle_1 = 0)
!evaluate ($Toppar.nfle_2 = 0)
evaluate ($Toppar.autohis = true)
evaluate ($Toppar.delenph = true)
evaluate ($Saprotocol.iniseed=911)
evaluate ($Toppar.autohis = true)
evaluate ($Data.dielec = cdie)
evaluate ($Data.epsilon1 = 1)
evaluate ($Data.waterdock = false)
evaluate ($refine.keepwater = false)

evaluate ($Data.noecv = false)
evaluate ($Data.flags.dihed = true)
evaluate ($Data.flags.noe = false)
evaluate ($Data.flags.cdih = false)
evaluate ($Data.flags.sani = false)
evaluate ($Data.flags.vean = false)
evaluate ($Data.flags.xrdc = false)
evaluate ($Data.flags.DANI = false)
evaluate ($Data.flags.XPCS = false)
evaluate ($Data.flags.harm = false)
evaluate ($Data.flags.zres = false)
evaluate ($Data.flags.rg = false)
evaluate ($Data.flags.em  = false)
evaluate ($Data.flags.sym  = false)
evaluate ($Data.flags.ncs  = false)
evaluate ($Data.flcut_nb = 5.0)


evaluate ($log_level=verbose)

topology
     @@&prot_topology_infile
     @@&ion_topology_infile
     @@&nucl_topology_infile
     @@&solv_topology_infile
     @@&carbo_topology_infile
     @@&ligands_topology_infile
     @@&cofac_topology_infile
     @@&heme_topology_infile
     @@&prot_break_infile
     @@&dna_break_infile
end

parameter
     @@&prot_parameter_infile
     @@&ion_parameter_infile
     @@&nucl_parameter_infile
     @@&solv_parameter_infile
     @@&carbo_parameter_infile
     @@&ligands_parameter_infile
     @@&cofac_parameter_infile
     @@&heme_parameter_infile
end

evaluate ($count = 0)

for $file in ( @@$filelist ) loop readpdb
  eval($count=$count+1)
  evaluate ($filename= $file - ".pdb" + "_conv.pdb")
  evaluate ($psfname= $file - ".pdb" + "_conv.psf")

  fileexist $filename end
  evaluate ($convfileexist=$result)
  if ($convfileexist eq false) then
  dele sele=(all) end
  struc reset end
  noe reset end

  segment
    chain
      if ( &convert = true ) then
        convert=true
      end if
      if ( &separate = true ) then
        separate=true
      end if
      @@&nucl_link_infile
      @@&cofac_link_infile
      @@&prot_link_infile
      coordinates @@$file
    end
  end
 
  coordinates @@$file end

  ! next line to remove the MAP atom defined in the DUM residue
  ! in case of use of dummy particles
  delete sele=(name MAP) end

  if ( &BLANK%ile_CD_becomes = false ) then
    do (name=&ile_CD_becomes) (resn ILE and name CD)
  end if
  if ( &BLANK%OT1_becomes = false ) then
    do (name=&OT1_becomes) (name OT1)
  end if
  if ( &BLANK%OT2_becomes = false ) then
    do (name=&OT2_becomes) (name OT2)
  end if

  if ($Toppar.delenph = true) then
    delete sele=(name H* and attr charge = 0) end
  end if

  set seed=$Saprotocol.iniseed end

  show sum(1) ( not(hydrogen) and not(known) )
  if ( $select = 0 ) then
    display  %INFO: There are no coordinates missing for non-hydrogen atoms
  end if

  if ( $log_level = verbose ) then
    set message=normal echo=on end
  else
    set message=off echo=off end
  end if

  inline @HADDOCK:protocols-scoring/build-missing.cns

  if ( &auto_break = true ) then
    inline @HADDOCK:protocols/prot_break.cns
    inline @HADDOCK:protocols/dna_break.cns
  end if

  ! check for disulphide bonds

  evaluate ($disu=0)

  for $id1 in id ( resn CYS and name SG ) loop dis1
 
    show (segid) (id $id1)
    evaluate ($segid1=$result)
    show (resid) (id $id1)
    evaluate ($resid1=$result)

    identity (store9) (all)

    for $id2 in id ( resn CYS and name SG and 
                   ( attr store9 > $id1 ) ) loop dis2

      show (segid) (id $id2)
      evaluate ($segid2=$result)
      show (resid) (id $id2)
      evaluate ($resid2=$result)

      pick bond (id $id1) (id $id2) geometry

      if ( $result <= &disulphide_dist ) then
        evaluate ($disu=$disu+1)
        evaluate ($seg1.$disu=$segid1)
        evaluate ($seg2.$disu=$segid2)
        evaluate ($res1.$disu=$resid1)
       evaluate ($res2.$disu=$resid2)
      end if

    end loop dis2

  end loop dis1

  evaluate ($counter=1)
  while ( $counter <= $disu ) loop disu
    patch disu
      reference=1=(segid $seg1.$counter and resid $res1.$counter)
      reference=2=(segid $seg2.$counter and resid $res2.$counter)
    end
    buffer message
      display disulphide added: from \
$seg1.$counter[a4] $res1.$counter[a4] to $seg2.$counter[a4] $res2.$counter[a4]
    end
    evaluate ($counter=$counter+1)
  end loop disu


  ! check for covalently-linked hemeC

  inline @HADDOCK:protocols/covalheme.cns


  ! check for cis-Proline

  for $id in id ( &atom_select and name ca and resn PRO) loop cisp

    show (segid) (id $id)
    evaluate ($segid=$result)
    show (resid) (id $id)
    evaluate ($resid=$result)
    show (resn) (id $id)
    evaluate ($resn=$result)

    identity (store9) ( &atom_select and ( name c and bondedto 
             ( name n and resid $resid and segid $segid ) ) )
    if ( $select = 1 ) then
      show element (store9) (attribute store9 > 0)
      evaluate ($id_prev=$result)
      show (segid) (id $id_prev)
      evaluate ($segid_prev=$result)
      show (resid) (id $id_prev)
      evaluate ($resid_prev=$result)
      show (resn) (id $id_prev)
      evaluate ($resn_prev=$result)
 
      pick dihedral
        (name ca and segid $segid_prev and resid $resid_prev)
        (name  c and segid $segid_prev and resid $resid_prev)
        (name  n and segid $segid and resid $resid)
        (name ca and segid $segid and resid $resid)
        geometry
       
      evaluate ($dihedral=mod($result+360,360))

      if ( $dihedral > 180 ) then
        evaluate ($dihedral=$dihedral-360)
      end if

      evaluate ($absdihedral=abs($dihedral))

      if ( $absdihedral < 25 ) then
        patch cisp reference=NIL=(segid $segid_prev and resid $resid_prev) end
        buffer message
          display CIS peptide bon detected for residue $resid_prev
        end
      end if

    end if

  end loop cisp

  if (&hydrogen_flag=false) then
    delete selection=( hydrogen ) end
  end if

  delete selection=( &atom_delete ) end

  inline @HADDOCK:protocols-scoring/build-missing.cns

  if (&set_bfactor=true) then
    do (b=&bfactor) ( all )
  else
    show ave(b) (known and not(store1))
    do (b=$result) (store1 and (attr b < 0.01))
  end if
 
{* ===================== turn on electrostatics *}

  parameter
    nbonds
      nbxmod=5 atom cdie shift
      cutnb=9.5 ctofnb=8.5 ctonnb=6.5 eps=$Data.epsilon1 e14fac=0.4 inhibit 0.5
      wmin=0.5
      tolerance  0.5
      repel=0.0
    end
  end

  if ($Data.dielec eq rdie) then
    parameter nbonds eps=$Data.epsilon1 rdie shift switch end end
  end if

  flags excl * incl bond angl impr dihe vdw elec end

  !check for histidine protonation state if auto mode on
  if ($Toppar.autohis = true) then
     inline @HADDOCK:protocols/auto-his.cns
  end if

{* ===================== calculate free molecules internal energy *}

  do (refx=x) (all)
  do (refy=y) (all)
  do (refz=z) (all)
  evaluate ($elec = 0.0)
  evaluate ($eintfree = 0.0)
  inline @HADDOCK:protocols-scoring/calc_free-ene.cns
  do (x=refx) (all)
  do (y=refy) (all)
  do (z=refz) (all)

{* ===================== minimize complex *}

  fix selection=(not all) end

  minimize powell
     nstep=50
     drop=40.0
     nprint=10
  end
  fix selection=(not all) end

  parameter nbonds eps=1.0 end end


{* ===================== calculate complex internal energy *}
  evaluate ($kinter = 1.0)
  @HADDOCK:protocols-scoring/scale_intra_only.cns
  energy end
  evaluate ($eintcplx = $bond + $angl + $impr + $dihe + $vdw + $elec)
  if ($data.ncomponents = 1) then
    evaluate ($eintfree = $eintcplx)
  end if

{* ===================== calculate final energies and write structure *}
  if ($data.ncomponents > 1) then
    evaluate ($kinter = 1.0)
    @HADDOCK:protocols-scoring/scale_inter_final.cns
  else
    @HADDOCK:protocols-scoring/scale_intra_only.cns
  end if

  energy end

  evaluate ($esym = 0.0)
  evaluate ($enoe = 0.0)
  evaluate ($cdih=0.0)
  evaluate ($eair= 0.0)
  evaluate ($rms_noe=0.0)
  evaluate ($violations_noe=0)
  evaluate ($rms_test_noe=0.0)
  evaluate ($violations_test_noe=0)
  evaluate ($esym = 0.0)
  evaluate ($ncs = 0.0)
  evaluate ($zhar = 0.0)
  evaluate ($esolcplx = 0.0)
  evaluate ($edesolv = 0.0)
  evaluate ($lcc = 0.0)
  evaluate ($etot = $ener - $noe)
  evaluate ($noe = $eair)
  evaluate ($etot = $etot + $noe)

  set remarks=reset end
  buffer message
    to=remarks
    dump
    reset
  end

  do (q=1.0) (all)
  @HADDOCK:protocols-scoring/print_coorheader.cns
  coor orient end
  write coordinates format=pdbo sele= (all) output =$filename end
  write structure output =$psfname end

  end if

end loop readpdb

stop


